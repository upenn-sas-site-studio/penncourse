<?php
// $Id: penncourse.module,v 1.4 2011/06/21 21:17:00 rickward Exp $

/**
* Display help and module information
* @param section which section of the site we're displaying help
* @return help text for section
*/
function penncourse_help($section='') {
  $output = '';

  switch ($section) {
    case "admin/help#penncourse":
      $output = '<p>'.  t("Displays course information from the Penn Data Warehouse. Requires separate configuration of data synchronization tasks."). '</p>';
      break;
  }

  return $output;
} // function onthisdate_help

function penncourse_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'penncourse'),
  );
}

function penncourse_init() {
  ini_set('display_errors',1);
  error_reporting(E_ALL);
} // function penncourse_init()

/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function penncourse_perm() {
  return array('access penncourse content','admin penncourse');
} // function penncourse_perm()

/**
 * Implementation of hook_menu()
 */
function penncourse_menu() {
  global $user;
  $base_path = (base_path() == '/') ? '' : base_path().'/';
  $items['admin/settings/penncourse'] = array(
    'title' => 'PennCourse',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('penncourse_admin_settings'),
    'access arguments' => array('admin penncourse'),
    'description' => 'Change settings for the Penncourse module.',
    'file' => 'penncourse.admin.inc',
  );
  $items['pc/term/%'] = array(
    'title' => 'Courses',
    'page callback' => 'penncourse_course_list_term',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access penncourse content'),
    'type' => MENU_CALLBACK,
    'file' => 'penncourse.pages.inc',
  );
  $items['pc/load/%'] = array(
    'title' => 'Loading Courses',
    'page callback' => 'penncourse_load_year',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('admin penncourse'),
    'type' => MENU_CALLBACK,
    'file' => 'penncourse.pages.inc',
  );
  $items['pc/term/%/subject/%'] = array(
    'title' => 'Courses',
    'page callback' => 'penncourse_course_list_term',
    'page arguments' => array(2,4),
    'access callback' => 'user_access',
    'access arguments' => array('access penncourse content'),
    'type' => MENU_CALLBACK,
    'file' => 'penncourse.pages.inc',
  );
  $items['pc/course/%/%'] = array(
    'title' => 'Course Details',
    'page callback' => 'penncourse_course_detail',
    'page arguments' => array(2,3),
    'access callback' => 'user_access',
    'access arguments' => array('access penncourse content'),
    'type' => MENU_CALLBACK,
    'file' => 'penncourse.pages.inc',
  );
  return $items;
} // function penncourse_menu()

/**
 * Implementation of hook_form_alter()
 */
function penncourse_form_alter(&$form, $form_state, $form_id) {
} // function penncourse_form_alter()

/**
 * Implementation of hook_cron
 */
function penncourse_cron() {
  module_load_include('inc', 'penncourse', 'penncourse.include');
  $subject_array = explode(' ',trim(variable_get('penncourse_subject_areas', '')));
  
  // process each subject area as set on the penncourse system settings form
  foreach ($subject_array as $subject) {
    penncourse_process_subj_area($subject);
  }
  // penncourse_cleanup();
}

/*
 * UTILITY FUNCTIONS
 */

/**
 * function penncourse_process_subj_area($subj_area,$year)
 * processes the course and section entries for a single subject area
 */
/* function penncourse_process_subj_area($subj_area,$year = NULL) {
  if (!$year || ($year == date('Y',time()))) {
    $start_term = penncourse_start_term();
    $end_term = penncourse_load_final_term();
  } else {
    $start_term = $year.'A';
    $end_term = $year.'C';
  }
  $prev_course_term = '';
  $course_nid = null;
  
  watchdog('penncourse cron', 'end term: '.$end_term, array(), WATCHDOG_NOTICE);

  // get info about course and section tables and fields
  $course_table = array();
  $course_field = array();
  $db_info = content_database_info(content_fields('field_pc_course_id','pc_course'));
  $course_table['course_id'] = $db_info['table'];
  $course_field['course_id'] = $db_info['columns']['value']['column'];
  $db_info = content_database_info(content_fields('field_pc_term','pc_course'));
  $course_table['term'] = $db_info['table'];
  $course_field['term'] = $db_info['columns']['value']['column'];
  $section_table = array();
  $section_field = array();
  $db_info = content_database_info(content_fields('field_pc_section_id','pc_section'));
  $section_table['section_id'] = $db_info['table'];
  $section_field['section_id'] = $db_info['columns']['value']['column'];
  $db_info = content_database_info(content_fields('field_pc_term','pc_section'));
  $section_table['term'] = $db_info['table'];
  $section_field['term'] = $db_info['columns']['value']['column'];
  $sql = sprintf("SELECT DISTINCT p.subject_area, " .
    "p.course_id, " .
    "p.course_no, " .
    "p.course_title, " .
    "p.course_instructors, " .
    "p.section_id, " .
    "p.section_no, " .
    "p.course_desc, " .
    "p.term, " .
    "p.term_session, " .
    "p.course_meeting, " .
    "p.xlists, " .
    "p.activity, " .
    "p.syllabus_url, " .
    "p.status, " .
    "ci.nid AS course_nid, " .
    "si.nid AS section_nid " .
    "FROM warehousesync.pc_courses_temp p LEFT JOIN (%s ci JOIN %s ct ON (ci.nid = ct.nid AND ci.vid = ct.vid) JOIN node cn ON (cn.nid = ct.nid AND cn.vid = ct.vid AND cn.type = 'pc_course')) ON (p.course_id = ci.%s AND p.term = ct.%s) " .
    "LEFT JOIN (%s si JOIN %s st ON (si.nid = st.nid AND si.vid = st.vid) JOIN node sn ON (sn.nid = st.nid AND sn.vid = st.vid AND sn.type = 'pc_section')) ON (p.section_id = si.%s AND p.term = st.%s) " .
    "WHERE subject_area = '%s' AND p.term >= '%s' AND p.term <= '%s' ORDER BY course_id, term, section_id",
    $course_table['course_id'],
    $course_table['term'],
    $course_field['course_id'],
    $course_field['term'],
    $section_table['section_id'],
    $section_table['term'],
    $section_field['section_id'],
    $section_field['term'],
    $subj_area,
    $start_term,
    $end_term);

  $results = db_query($sql);
  // echo print_r($results).chr(10).chr(13);
  
  // echo $sql.chr(10).chr(13);
  while ($section = db_fetch_object($results)) {
    
    // echo print_r($section).chr(10).chr(13);
  
    // handle course node
    if ($section->course_id.$section->term != $prev_course_term) {
      // reset course_nid
      $course_nid = null;
      if ($section->course_nid) {
        $course_nid = $section->course_nid;
        
        // node found, try to update node
        penncourse_update_course_node($section->course_nid,
                     $section->subject_area, 
                     $section->course_id, 
                     $section->course_title, 
                     $section->course_desc, 
                     $section->term, 
                     $section->term_session, 
                     $section->status);
      } else {
        // no node found, create a new node
        $course_nid = penncourse_new_course_node($section->subject_area, 
                     $section->course_id, 
                     $section->course_title, 
                     $section->course_desc, 
                     $section->term, 
                     $section->term_session, 
                     $section->status);
        // echo 'Course NID: '.$course_nid.chr(10).chr(13);
      }
      // update $prev_course_term
      $prev_course_term = $section->course_id.$section->term;
    }
    // check for pre-existing section node with matching section_id and term
    // $check = check_for_section_node($section->section_id,$section->term);
  
    if ($course_nid) {
      if ($section->section_nid) {
        // node found, try to update node
        penncourse_update_section_node($section->section_nid,
                       $section->subject_area, 
                       $course_nid, 
                       $section->course_id, 
                       $section->course_no, 
                       $section->course_title, 
                       $section->course_instructors, 
                       $section->section_id, 
                       $section->section_no, 
                       $section->term, 
                       $section->term_session, 
                       $section->course_meeting, 
                       $section->xlists, 
                       $section->activity, 
                       $section->syllabus_url, 
                       $section->status);
                       
      } else {
        // no node found, create a new node
        penncourse_new_section_node($section->subject_area, 
                       $course_nid, 
                       $section->course_id, 
                       $section->course_no, 
                       $section->course_title, 
                       $section->course_instructors, 
                       $section->section_id, 
                       $section->section_no, 
                       $section->term, 
                       $section->term_session, 
                       $section->course_meeting, 
                       $section->xlists, 
                       $section->activity, 
                       $section->syllabus_url, 
                       $section->status);
                       
      }
      // $course_nid = null;
    } else {
      echo 'No course node found or created. No section node created: '.$section->section_id.chr(10).chr(13);
    }
  }
  unset($results);
} // function penncourse_process_subj_area() */

/**
 * function penncourse_cleanup()
 * delete nodes for canceled courses and sections
 */
function penncourse_cleanup() {
  // get info about course and section tables and fields
  $course_table = array();
  $course_field = array();
  $db_info = content_database_info(content_fields('field_pc_course_id','pc_course'));
  $course_table['course_id'] = $db_info['table'];
  $course_field['course_id'] = $db_info['columns']['value']['column'];
  $db_info = content_database_info(content_fields('field_pc_term','pc_course'));
  $course_table['term'] = $db_info['table'];
  $course_field['term'] = $db_info['columns']['value']['column'];
  $section_table = array();
  $section_field = array();
  $db_info = content_database_info(content_fields('field_pc_status','pc_course'));
  $course_table['status'] = $db_info['table'];
  $course_field['status'] = $db_info['columns']['value']['column'];
  $section_table = array();
  $section_field = array();
  $db_info = content_database_info(content_fields('field_pc_section_id','pc_section'));
  $section_table['section_id'] = $db_info['table'];
  $section_field['section_id'] = $db_info['columns']['value']['column'];
  $db_info = content_database_info(content_fields('field_pc_term','pc_section'));
  $section_table['term'] = $db_info['table'];
  $section_field['term'] = $db_info['columns']['value']['column'];
  $db_info = content_database_info(content_fields('field_pc_status','pc_section'));
  $section_table['status'] = $db_info['table'];
  $section_field['status'] = $db_info['columns']['value']['column'];
  
  // get nid's for course nodes to be deleted
  $sql = sprintf("SELECT ci.nid FROM " .
      "(%s ci JOIN %s ct ON (ci.nid = ct.nid AND ci.vid = ct.vid) JOIN %s cs ON (cs.nid = ct.nid AND cs.vid = ct.vid) JOIN node cn ON (cn.nid = ct.nid AND cn.vid = ct.vid AND cn.type = 'pc_course')) " .
      "LEFT JOIN warehousesync.pc_courses_temp p ON " .
      "(ci.%s = p.course_id " .
      "AND ct.%s = p.term) " .
      "WHERE p.course_id IS NULL AND p.term >= '%s'",
      $course_table['course_id'],
      $course_table['term'],
      $course_table['status'],
      $course_field['course_id'],
      $course_field['term'],
      penncourse_start_term());
      
  $results = db_query($sql);
  
  // delete course nodes
  while ($course = db_fetch_object($results)) {
    // echo 'deleting course node: '.$course->nid.chr(10).chr(13);
    node_delete($course->nid);
  }
  unset($results);
  
  // get nid's for section nodes to be deleted
  $sql = sprintf("SELECT si.nid FROM " .
      "(%s si JOIN %s st ON (si.nid = st.nid AND si.vid = st.vid) JOIN %s ss ON (ss.nid = st.nid AND ss.vid = st.vid) JOIN node sn ON (sn.nid = st.nid AND sn.vid = st.vid AND sn.type = 'pc_section')) " .
      "LEFT JOIN warehousesync.pc_courses_temp p ON " .
      "(si.%s = p.section_id " .
      "AND st.%s = p.term) " .
      "WHERE p.section_id IS NULL AND p.term >= '%s'",
      $section_table['section_id'],
      $section_table['term'],
      $section_table['status'],
      $section_field['section_id'],
      $section_field['term'],
      penncourse_start_term());
      
  $results = db_query($sql);
  
  // delete section nodes
  while ($course = db_fetch_object($results)) {
    // echo 'deleting section node: '.$course->nid.chr(10).chr(13);
    node_delete($course->nid);
  }
  unset($results);
  
}

/**
 * function pcpm
 * 
 * a wrapper for the devel module dpm function
 */
function pcpm($value) {
  if (module_exists('devel')) {
    dpm($value);
  }
}

